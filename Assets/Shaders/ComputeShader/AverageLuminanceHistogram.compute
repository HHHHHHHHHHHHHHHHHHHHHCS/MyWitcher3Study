//也可以这样 #pragma kernel Test01 MAIN=CSMain
#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

CBUFFER_START(PerFrame)
float3 avgLumaHistData;//.x 1920/4 = 480 .y 0.51582  .z 0.0
CBUFFER_END

static const float3 LUMA_RGB = float3(0.2126, 0.7152, 0.0722);

TEXTURE2D(_MainTex);
TEXTURE2D(_DepthTex);

RWStructuredBuffer<uint> avgLumaBuffer;

groupshared uint shared_data[256];

[numthreads(64, 1, 1)]
void CSMain(uint3 GTid: SV_GroupThreadID, uint3 Gid: SV_GroupID)
{
	const int groupID = Gid.x;//0~270
	
	const uint threadID = GTid.x;//0~63
	
	uint idx = 0;
	
	UNITY_UNROLL
	for (idx = 0; idx < 4; idx ++)
	{
		const uint offset = threadID + idx * 64;
		shared_data[offset] = 0;
	}
	
	//等待全部的颜色清空完毕
	GroupMemoryBarrierWithGroupSync();
	
	uint viewportSizeX = avgLumaHistData.x;//1920/4 = 480
	
	UNITY_LOOP
	for (uint positionX = 0; positionX < viewportSizeX; positionX += 64)
	{
		uint currentPixelPositionX = positionX + threadID;
		uint currentPixelPositionY = groupID;
		
		if (currentPixelPositionX < viewportSizeX)
		{
			uint2 colorPos = uint2(currentPixelPositionX, currentPixelPositionY);
			float3 color = _MainTex.Load(int3(colorPos, 0)).rgb;
			float luma = dot(color, LUMA_RGB);
			
			/*
			//因为颜色的RT缩放了1/4  所以位置要*4回来
			//所以 iDepthTextureScale = 4
			const int iDepthTextureScale = 4;
			
			uint2 depthPos = iDepthTextureScale * colorPos;
			float depth = _DepthTex.Load(int3(depthPos, 0)).x;
			
			//check if sky
			float value = (depth == 1.0)?avgLumaHistData.y: 0.0;
			
			//如果是天空则降低亮度 到某个值
			float lumaOK = lerp(luma, avgLumaHistData.z, value);
			
			//log可以使颜色分部更均匀 e为底数
			//这里是HDR 所以 luma 会超过 1
			//loge(1) = 0  loge(2.718...) = 1
			lumaOK = log(lumaOK + 1.0);
			lumaOK *= 128;
			
			uint uLuma = (uint)lumaOK;
			uLuma = min(uLuma, 255);
			*/
			uint uLuma = min(luma*128, 255);
			InterlockedAdd(shared_data[uLuma], 1);
		}
	}
	
	//等待颜色分部完毕
	GroupMemoryBarrierWithGroupSync();
	
	//然后把数据写入传出的RW 数据
	UNITY_UNROLL
	for (idx = 0; idx < 4; idx ++)
	{
		const uint offset = threadID + idx * 64;
		uint data = shared_data[offset];
		InterlockedAdd(avgLumaBuffer[offset], data);
		//InterlockedAdd(avgLumaBuffer[256], data);
	}
}
